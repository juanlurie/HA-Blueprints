blueprint:
  name: TX Gesture Control (Safe + All Inputs Optional)
  description: >
    Responds to swipe gestures (up/down) and touch fields (1â€“4) from a Sonoff TX Ultimate panel.
    Each input is optional and ignored if left blank.
  domain: automation

  input:
    swipe_up_entity:
      name: Swipe Up Sensor (Optional)
      default: ""
      selector:
        entity:
          domain: binary_sensor

    swipe_up_action:
      name: Swipe Up Action
      default: toggle
      selector:
        select:
          options:
            - toggle
            - turn_on
            - turn_off

    swipe_up_targets:
      name: Swipe Up Targets
      default: []
      selector:
        target:

    swipe_down_entity:
      name: Swipe Down Sensor (Optional)
      default: ""
      selector:
        entity:
          domain: binary_sensor

    swipe_down_action:
      name: Swipe Down Action
      default: toggle
      selector:
        select:
          options:
            - toggle
            - turn_on
            - turn_off

    swipe_down_targets:
      name: Swipe Down Targets
      default: []
      selector:
        target:

    touchfield_1_entity:
      name: Touch Field 1 Sensor (Optional)
      default: ""
      selector:
        entity:
          domain: binary_sensor

    touchfield_1_action:
      name: Touch Field 1 Action
      default: toggle
      selector:
        select:
          options:
            - toggle
            - turn_on
            - turn_off

    touchfield_1_targets:
      name: Touch Field 1 Targets
      default: []
      selector:
        target:

    touchfield_2_entity:
      name: Touch Field 2 Sensor (Optional)
      default: ""
      selector:
        entity:
          domain: binary_sensor

    touchfield_2_action:
      name: Touch Field 2 Action
      default: toggle
      selector:
        select:
          options:
            - toggle
            - turn_on
            - turn_off

    touchfield_2_targets:
      name: Touch Field 2 Targets
      default: []
      selector:
        target:

mode: single

# Use a wildcard trigger and do the logic in action
trigger:
  - platform: state
    entity_id:
      - !input swipe_up_entity
      - !input swipe_down_entity
      - !input touchfield_1_entity
      - !input touchfield_2_entity
    from: 'off'
    to: 'on'

action:
  - variables:
      gesture_map:
        "{{ swipe_up_entity }}":
          service: "light.{{ swipe_up_action }}"
          targets: !input swipe_up_targets
        "{{ swipe_down_entity }}":
          service: "light.{{ swipe_down_action }}"
          targets: !input swipe_down_targets
        "{{ touchfield_1_entity }}":
          service: "light.{{ touchfield_1_action }}"
          targets: !input touchfield_1_targets
        "{{ touchfield_2_entity }}":
          service: "light.{{ touchfield_2_action }}"
          targets: !input touchfield_2_targets

  - choose:
      - conditions: >
          {{ trigger.entity_id in gesture_map and (gesture_map[trigger.entity_id].targets | length > 0) }}
        sequence:
          - service: "{{ gesture_map[trigger.entity_id].service }}"
            target: "{{ gesture_map[trigger.entity_id].targets }}"
