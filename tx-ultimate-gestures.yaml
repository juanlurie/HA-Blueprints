blueprint:
  name: TX Ultimate Gesture Control (Device + Gesture Entities)
  description: >
    Control lights or areas using swipes and touches from a Sonoff TX Ultimate panel
    with ESPHome. Select your device, then assign gesture binary sensors.
  domain: automation
  input:
    tx_device:
      name: TX Ultimate Device
      description: Select your TX Ultimate device running ESPHome.
      selector:
        device:

    swipe_up_entity:
      name: Swipe Up Gesture Sensor
      selector:
        entity:
          domain: binary_sensor

    swipe_up_target:
      name: Swipe Up - Turn On Targets
      selector:
        target:

    swipe_down_entity:
      name: Swipe Down Gesture Sensor
      selector:
        entity:
          domain: binary_sensor

    swipe_down_target:
      name: Swipe Down - Turn Off Targets
      selector:
        target:

    touchfield_1_entity:
      name: Touchfield 1 Gesture Sensor
      selector:
        entity:
          domain: binary_sensor

    touchfield_1_toggle_target:
      name: Touchfield 1 - Toggle Targets
      selector:
        target:

    touchfield_2_entity:
      name: Touchfield 2 Gesture Sensor
      selector:
        entity:
          domain: binary_sensor

    touchfield_2_toggle_target:
      name: Touchfield 2 - Toggle Targets
      selector:
        target:

    touchfield_3_entity:
      name: Touchfield 3 Gesture Sensor
      selector:
        entity:
          domain: binary_sensor

    touchfield_3_toggle_target:
      name: Touchfield 3 - Toggle Targets
      selector:
        target:

    touchfield_4_entity:
      name: Touchfield 4 Gesture Sensor
      selector:
        entity:
          domain: binary_sensor

    touchfield_4_toggle_target:
      name: Touchfield 4 - Toggle Targets
      selector:
        target:

mode: single

trigger:
  - platform: state
    entity_id:
      - !input swipe_up_entity
      - !input swipe_down_entity
      - !input touchfield_1_entity
      - !input touchfield_2_entity
      - !input touchfield_3_entity
      - !input touchfield_4_entity
    from: 'off'
    to: 'on'

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == swipe_up_entity }}"
        sequence:
          - condition: template
            value_template: "{{ (swipe_up_target | length) > 0 }}"
          - service: light.turn_on
            data:
              entity_id: "{{ swipe_up_target | join(',') }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == swipe_down_entity }}"
        sequence:
          - condition: template
            value_template: "{{ (swipe_down_target | length) > 0 }}"
          - service: light.turn_off
            data:
              entity_id: "{{ swipe_down_target | join(',') }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == touchfield_1_entity }}"
        sequence:
          - condition: template
            value_template: "{{ (touchfield_1_toggle_target | length) > 0 }}"
          - service: light.toggle
            data:
              entity_id: "{{ touchfield_1_toggle_target | join(',') }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == touchfield_2_entity }}"
        sequence:
          - condition: template
            value_template: "{{ (touchfield_2_toggle_target | length) > 0 }}"
          - service: light.toggle
            data:
              entity_id: "{{ touchfield_2_toggle_target | join(',') }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == touchfield_3_entity }}"
        sequence:
          - condition: template
            value_template: "{{ (touchfield_3_toggle_target | length) > 0 }}"
          - service: light.toggle
            data:
              entity_id: "{{ touchfield_3_toggle_target | join(',') }}"

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == touchfield_4_entity }}"
        sequence:
          - condition: template
            value_template: "{{ (touchfield_4_toggle_target | length) > 0 }}"
          - service: light.toggle
            data:
              entity_id: "{{ touchfield_4_toggle_target | join(',') }}"
